#!/usr/bin/env python

import argparse
import collections
import functools
import math
import statistics as stat
import sys
import numpy as np
import matplotlib
import matplotlib.pyplot as plt

def plot(x_values, y_values, size_values, color_values, title='', x_label='', y_label=''):
    fig, ax = plt.subplots()

    ax.scatter(x_values, y_values, s=size_values, c=color_values, cmap="flag")

    ax.set(xlabel=x_label, ylabel=y_label, title=title)

    # create x-axis ticks
    # step = int(round(max_value/10, -1)) # 10 nice steps
    # ticks = range(0, max_value, step)
    # ax.set_xticks(ticks)

    # Tweak spacing to prevent clipping of ylabel
    fig.tight_layout()

    return fig

def get_values(input):
    x_values = []
    y_values = []
    size_values = []
    colors = []
    # max_value = 0.0
    # max_sum = 0.0
    cell_counter = collections.Counter()
    for line in input:
        combo, count, _cells = line.strip().split(maxsplit=2)
        grna1, grna2 = combo.strip('()').split(',')
        cells = list(map(lambda x: math.log10(float(x)), _cells.split()))
        cell_median = stat.median(cells)
        cell_counter.update([cell_median])
        grna1 = int(grna1)
        grna2 = int(grna2)
        count = int(count)
        x_values.extend([grna1, grna2])
        y_values.extend([grna2, grna1])
        size_values.extend([1, 1])
        colors.extend([cell_median, cell_median])

        # max_value = float(max(max_value, grna1, grna2))
        # max_sum = max(max_sum, cell_sum)
    median = stat.median(cell_counter.elements())
    mean = stat.fmean(cell_counter.elements())
    colors = list(map(lambda x: x / median, colors))
    return np.array(x_values), np.array(y_values), np.array(size_values), np.array(colors)

def parse_args():
    parser = argparse.ArgumentParser(description='Generate a plot of cell grna combination data.')
    parser.add_argument('-i', '--input', default=None, help="input file generated by gen_cells_per_guide_combo.py")
    parser.add_argument('-o', '--output', default=None, help="output file for histogram image")
    parser.add_argument('-b', '--bincount', type=int, default=100, help="number of bins for the histogram")
    parser.add_argument('-t', '--title', default='', help="histogram title")
    parser.add_argument('-x', '--xlabel', default='', help="label for the x-axis")
    parser.add_argument('-y', '--ylabel', default='', help="label for the y-axis")
    args = parser.parse_args()
    return args.input, args.output, args.bincount, args.title, args.xlabel, args.ylabel

def parse_from(file, parse_func, alt=sys.stdin):
    if file is not None:
        with open(file) as input:
            return parse_func(input)
    else:
        return parse_func(alt)

if __name__ == "__main__":
    input_file, output_file, bin_count, title, x_label, y_label = parse_args()

    x_values, y_values, size_values, color_values = parse_from(input_file, get_values)

    fig = plot(x_values, y_values, size_values, color_values, title=title, x_label=x_label, y_label=y_label)

    if output_file is None:
        plt.show()
    else:
        fig.savefig(output_file, transparent=False, dpi=80, bbox_inches="tight")
